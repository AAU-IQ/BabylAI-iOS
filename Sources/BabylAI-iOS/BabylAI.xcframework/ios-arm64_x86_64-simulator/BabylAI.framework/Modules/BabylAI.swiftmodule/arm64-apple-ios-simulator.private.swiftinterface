// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BabylAI
@_exported import BabylAI
import Combine
import CoreText
import DeveloperToolsSupport
import Foundation
import Security
import Swift
import SwiftUI
import SwiftUICore
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum BabylAIEnvironment : Swift.String, Swift.CaseIterable {
  case production
  case development
  public var displayName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BabylAI.BabylAIEnvironment]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [BabylAI.BabylAIEnvironment] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct EnvironmentConfig {
  public let environment: BabylAI.BabylAIEnvironment
  public let enableLogging: Swift.Bool
  public let connectionTimeout: Swift.Int
  public let receiveTimeout: Swift.Int
  public var baseUrl: Swift.String {
    get
  }
  public var isTestingMode: Swift.Bool {
    get
  }
  public var isProduction: Swift.Bool {
    get
  }
  public var shouldEnableLogging: Swift.Bool {
    get
  }
  public init(environment: BabylAI.BabylAIEnvironment, enableLogging: Swift.Bool = true, connectionTimeout: Swift.Int = 30_000, receiveTimeout: Swift.Int = 15_000)
  public static func production(enableLogging: Swift.Bool = false, connectionTimeout: Swift.Int = 30_000, receiveTimeout: Swift.Int = 15_000) -> BabylAI.EnvironmentConfig
  public static func development(enableLogging: Swift.Bool = true, connectionTimeout: Swift.Int = 30_000, receiveTimeout: Swift.Int = 15_000) -> BabylAI.EnvironmentConfig
}
extension BabylAI.EnvironmentConfig : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum EnvironmentService {
  public static func initialize(_ config: BabylAI.EnvironmentConfig)
  public static var isInitialized: Swift.Bool {
    get
  }
  public static var config: BabylAI.EnvironmentConfig {
    get
  }
  public static var baseUrl: Swift.String {
    get
  }
  public static var shouldEnableLogging: Swift.Bool {
    get
  }
  public static var isTestingMode: Swift.Bool {
    get
  }
  public static var isProduction: Swift.Bool {
    get
  }
  public static var connectionTimeout: Swift.Int {
    get
  }
  public static var receiveTimeout: Swift.Int {
    get
  }
  public static func reset()
}
public enum BabylAILocale {
  case arabic, english
  public static func == (a: BabylAI.BabylAILocale, b: BabylAI.BabylAILocale) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SenderType : Swift.Int, Swift.Codable {
  case customer
  case agent
  case ai
  public var iconName: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Message : Swift.Identifiable, Swift.Equatable, Swift.Codable {
  public let id: Foundation.UUID
  public let text: Swift.String
  public let senderType: BabylAI.SenderType
  public let needsAgent: Swift.Bool
  public let isSentByUser: Swift.Bool
  public let time: Foundation.Date
  public init(text: Swift.String, senderType: BabylAI.SenderType, needsAgent: Swift.Bool, isSentByUser: Swift.Bool, time: Foundation.Date = Date())
  public static func == (a: BabylAI.Message, b: BabylAI.Message) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SenderMessage : Swift.Identifiable, Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let chatSessionId: Swift.String
  public let senderId: Swift.String?
  public let senderType: Swift.Int
  public let messageContent: Swift.String
  public let sentAt: Foundation.Date
  public let isSeen: Swift.Bool
  public let isAIResponse: Swift.Bool
  public init(id: Swift.String, chatSessionId: Swift.String, senderId: Swift.String? = nil, senderType: Swift.Int, messageContent: Swift.String, sentAt: Foundation.Date, isSeen: Swift.Bool, isAIResponse: Swift.Bool)
  public static func == (a: BabylAI.SenderMessage, b: BabylAI.SenderMessage) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiKey : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let key: Swift.String
  public let name: Swift.String
  public let isDevelopment: Swift.Bool
  public let usageCount: Swift.Int
  public let quota: Swift.Int
  public let allowedDomains: [Swift.String]
  public let allowedIPs: [Swift.String]
  public let allowedBundleIds: [Swift.String]
  public let allowedAndroidKeys: [Swift.String]
  public let active: Swift.Bool
  public init(id: Swift.String, key: Swift.String, name: Swift.String, isDevelopment: Swift.Bool, usageCount: Swift.Int, quota: Swift.Int, allowedDomains: [Swift.String], allowedIPs: [Swift.String], allowedBundleIds: [Swift.String], allowedAndroidKeys: [Swift.String], active: Swift.Bool)
  public static func == (a: BabylAI.ApiKey, b: BabylAI.ApiKey) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Assistant : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let tenantId: Swift.String
  public let tenant: BabylAI.Tenant?
  public let name: Swift.String
  public let openAIAssistantId: Swift.String
  public let greeting: Swift.String
  public let closing: Swift.String
  public let limit: Swift.Int?
  public init(id: Swift.String, tenantId: Swift.String, tenant: BabylAI.Tenant? = nil, name: Swift.String, openAIAssistantId: Swift.String, greeting: Swift.String, closing: Swift.String, limit: Swift.Int? = nil)
  public static func == (a: BabylAI.Assistant, b: BabylAI.Assistant) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HelpScreen : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let tenantId: Swift.String
  public let title: Swift.String
  public let description: Swift.String?
  public let chatWithUs: Swift.Bool?
  public let options: [BabylAI.Option]?
  public init(id: Swift.String, tenantId: Swift.String, title: Swift.String, description: Swift.String? = nil, chatWithUs: Swift.Bool? = nil, options: [BabylAI.Option]? = nil)
  public static func == (a: BabylAI.HelpScreen, b: BabylAI.HelpScreen) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Option : Swift.Codable, Swift.Equatable, Swift.Identifiable {
  public let id: Swift.String
  public let helpScreenId: Swift.String
  public let parentOptionId: Swift.String?
  public let assistant: BabylAI.Assistant?
  public let title: Swift.String
  public let paragraphs: [Swift.String]
  public let files: [Swift.String]?
  public let chatWithUs: Swift.Bool?
  public init(id: Swift.String, helpScreenId: Swift.String, parentOptionId: Swift.String? = nil, assistant: BabylAI.Assistant? = nil, title: Swift.String, paragraphs: [Swift.String], files: [Swift.String]? = nil, chatWithUs: Swift.Bool? = nil)
  public static func == (a: BabylAI.Option, b: BabylAI.Option) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RootSession : Swift.Codable, Swift.Equatable {
  public let session: BabylAI.Session
  public let ablyToken: Swift.String
  public init(session: BabylAI.Session, ablyToken: Swift.String)
  public static func == (a: BabylAI.RootSession, b: BabylAI.RootSession) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Session : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let customerId: Swift.String
  public let assignedAgentId: Swift.String?
  public let jumpedInByAgentId: Swift.String?
  public let tenantId: Swift.String
  public let assistantId: Swift.String?
  public let threadId: Swift.String?
  public let helpScreenId: Swift.String?
  public let helpScreen: BabylAI.HelpScreen?
  public let optionId: Swift.String?
  public let option: BabylAI.Option?
  public let status: Swift.Int
  public let createdAt: Swift.String
  public let closedAt: Swift.String?
  public let closedByUserId: Swift.String?
  public let lastMessageAt: Swift.String
  public let unreadAgentMessages: Swift.Int
  public let unreadCustomerMessages: Swift.Int
  public let lastMessageContent: Swift.String?
  public let escalatedAt: Swift.String?
  public let assignedAt: Swift.String?
  public let jumpedInAt: Swift.String?
  public let channel: Swift.Int?
  public let externalId: Swift.String?
  public let tags: [Swift.String]?
  public let tenant: BabylAI.Tenant?
  public let assistant: BabylAI.Assistant?
  public let messages: [BabylAI.SenderMessage]
  public init(id: Swift.String, customerId: Swift.String, assignedAgentId: Swift.String? = nil, jumpedInByAgentId: Swift.String? = nil, tenantId: Swift.String, assistantId: Swift.String? = nil, threadId: Swift.String? = nil, helpScreenId: Swift.String? = nil, helpScreen: BabylAI.HelpScreen? = nil, optionId: Swift.String? = nil, option: BabylAI.Option? = nil, status: Swift.Int, createdAt: Swift.String, closedAt: Swift.String? = nil, closedByUserId: Swift.String? = nil, lastMessageAt: Swift.String, unreadAgentMessages: Swift.Int, unreadCustomerMessages: Swift.Int, lastMessageContent: Swift.String? = nil, escalatedAt: Swift.String? = nil, assignedAt: Swift.String? = nil, jumpedInAt: Swift.String? = nil, channel: Swift.Int? = nil, externalId: Swift.String? = nil, tags: [Swift.String]? = nil, tenant: BabylAI.Tenant? = nil, assistant: BabylAI.Assistant? = nil, messages: [BabylAI.SenderMessage])
  public static func == (a: BabylAI.Session, b: BabylAI.Session) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Tenant : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let name: Swift.String
  public let key: Swift.String
  public let apiKeys: [BabylAI.ApiKey]?
  public init(id: Swift.String, name: Swift.String, key: Swift.String, apiKeys: [BabylAI.ApiKey]? = nil)
  public static func == (a: BabylAI.Tenant, b: BabylAI.Tenant) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class AblyService {
  final public var onMessageReceived: ((BabylAI.Message) -> Swift.Void)?
  final public var onError: ((Swift.String) -> Swift.Void)?
  final public var onConnectionStarted: (() -> Swift.Void)?
  public init()
  final public func initializeConnection(ablyToken: Swift.String)
  final public func startConnection()
  final public func stopConnection()
  final public func isConnected() -> Swift.Bool
  final public func joinGroup(tenantId: Swift.String, sessionId: Swift.String)
  @objc deinit
}
@usableFromInline
internal enum FrameworkAssets {
}
public enum CairoFontWeight : Swift.String {
  case regular
  case medium
  case semiBold
  case bold
  public var fontName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppFont {
  public static func cairo(_ weight: BabylAI.CairoFontWeight, size: CoreFoundation.CGFloat) -> SwiftUICore.Font
}
@_hasMissingDesignatedInitializers @usableFromInline
final internal class BundleFinder {
  @objc @usableFromInline
  deinit
}
@_hasMissingDesignatedInitializers final public class FontManager {
  public static func registerFonts()
  public static func isRegistered() -> Swift.Bool
  @objc deinit
}
extension SwiftUICore.View {
  @available(*, deprecated, message: "Use FontManager.registerFonts() in SDK initialization instead")
  @_Concurrency.MainActor @preconcurrency public func registerFontsIfNeeded(from bundle: Foundation.Bundle = Bundle(for: BundleFinder.self)) -> some SwiftUICore.View
  
}
public struct MessageUIHelper {
  public static func bubbleColor(for senderType: BabylAI.SenderType) -> SwiftUICore.Color
  public static func textColor(for senderType: BabylAI.SenderType) -> SwiftUICore.Color
  public static func iconName(for senderType: BabylAI.SenderType) -> Swift.String
}






@_Concurrency.MainActor @preconcurrency public struct ThemedView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7BabylAI10ThemedViewV4bodyQrvp", 0) __<Content>
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class NetworkClient {
  public init(session: Foundation.URLSession = .shared)
  @discardableResult
  final public func request<T>(_ request: BabylAI.NetworkRequest, responseType: T.Type? = nil) async throws -> T? where T : Swift.Decodable
  @objc deinit
}
public enum NetworkError : Swift.Error, Foundation.LocalizedError {
  case invalidURL
  case requestFailed(any Swift.Error)
  case invalidResponse
  case decodingError(any Swift.Error)
  case unexpectedStatusCode(Swift.Int)
  case noData
  public var errorDescription: Swift.String? {
    get
  }
}
public struct NetworkRequest {
  public let endpoint: any BabylAI.EndpointPath
  public let method: BabylAI.HTTPMethod
  public let headers: [Swift.String : Swift.String]
  public let body: Foundation.Data?
  public init(endpoint: any BabylAI.EndpointPath, method: BabylAI.HTTPMethod = .get, headers: [Swift.String : Swift.String] = [:], body: Foundation.Data? = nil)
}
public protocol EndpointPath {
  var fullPath: Swift.String { get }
}
public enum Endpoints {
  public struct GetScreen : BabylAI.EndpointPath {
    public var fullPath: Swift.String {
      get
    }
  }
  public struct CreateSession : BabylAI.EndpointPath {
    public var fullPath: Swift.String {
      get
    }
  }
  public struct SendMessage : BabylAI.EndpointPath {
    public var fullPath: Swift.String {
      get
    }
  }
  public struct Messages : BabylAI.EndpointPath {
    public var fullPath: Swift.String {
      get
    }
  }
  public struct CloseSession : BabylAI.EndpointPath {
    public var fullPath: Swift.String {
      get
    }
  }
  public static var receiveTimeout: Swift.Int {
    get
  }
  public static var connectionTimeout: Swift.Int {
    get
  }
}
public struct KeychainManager {
  public func getAccessToken() async -> Swift.String?
  @discardableResult
  public func saveAccessToken(_ token: Swift.String) async -> Swift.Bool
  @discardableResult
  public func removeAccessToken() async -> Swift.Bool
  public func getRefreshToken() async -> Swift.String?
  @discardableResult
  public func saveRefreshToken(_ token: Swift.String) async -> Swift.Bool
  public func getExpireTime() async -> Swift.Int?
  @discardableResult
  public func saveExpireTime(_ timestamp: Swift.Int) async -> Swift.Bool
  @discardableResult
  public func clearAll() async -> Swift.Bool
}
public enum BabylAITheme : Swift.String {
  case light
  case dark
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class BabylAISDK {
  public static let shared: BabylAI.BabylAISDK
  final public func initialize(with config: BabylAI.EnvironmentConfig, locale: BabylAI.BabylAILocale, screenId: Swift.String, userInfo: [Swift.String : Any])
  final public func setTokenCallback(_ callback: @escaping () async throws -> Swift.String)
  @_Concurrency.MainActor final public func makeView(theme: BabylAI.BabylAITheme, userInfo: [Swift.String : Any], onMessageReceived: ((Swift.String) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  @_Concurrency.MainActor final public func viewer(isDirect: Swift.Bool = false, onMessageReceived: ((Swift.String) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  @_Concurrency.MainActor final public func viewerController(isDirect: Swift.Bool = false, onMessageReceived: ((Swift.String) -> Swift.Void)? = nil) -> UIKit.UIViewController
  @_Concurrency.MainActor final public func present(from presenter: UIKit.UIViewController, isDirect: Swift.Bool = false, onMessageReceived: ((Swift.String) -> Swift.Void)? = nil)
  @objc deinit
}
extension BabylAI.BabylAIEnvironment : Swift.Equatable {}
extension BabylAI.BabylAIEnvironment : Swift.Hashable {}
extension BabylAI.BabylAIEnvironment : Swift.RawRepresentable {}
extension BabylAI.BabylAILocale : Swift.Equatable {}
extension BabylAI.BabylAILocale : Swift.Hashable {}
extension BabylAI.SenderType : Swift.Equatable {}
extension BabylAI.SenderType : Swift.Hashable {}
extension BabylAI.SenderType : Swift.RawRepresentable {}
extension BabylAI.CairoFontWeight : Swift.Equatable {}
extension BabylAI.CairoFontWeight : Swift.Hashable {}
extension BabylAI.CairoFontWeight : Swift.RawRepresentable {}
extension BabylAI.ThemedView : Swift.Sendable {}
extension BabylAI.HTTPMethod : Swift.Equatable {}
extension BabylAI.HTTPMethod : Swift.Hashable {}
extension BabylAI.HTTPMethod : Swift.RawRepresentable {}
extension BabylAI.BabylAITheme : Swift.Equatable {}
extension BabylAI.BabylAITheme : Swift.Hashable {}
extension BabylAI.BabylAITheme : Swift.RawRepresentable {}
